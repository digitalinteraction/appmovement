<?php
/**
 * This file is loaded automatically by the app/webroot/index.php file after core.php
 *
 * This file should load/create any application wide configuration settings, such as
 * Caching, Logging, loading additional configuration files.
 *
 * You should also use this file to include any files that provide global functions/constants
 * that your application uses.
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @package       app.Config
 * @since         CakePHP(tm) v 0.10.8.2117
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */

// Setup a 'default' cache configuration for use in the application.
Cache::config('default', array('engine' => 'File'));

// Set current movement requirements
Configure::write('movement.target_supporters', 250); // Target supporters
Configure::write('movement.support_duration', 14); // Support duration
Configure::write('movement.design_duration', 14); // Design duration

// Set Salt for generating short urls
Configure::write('urlSalt', URL_SALT);

// Set min hash length for generating urls
Configure::write('urlHashMinLength', 4);

// Set min hash length for generating supporter codes
Configure::write('codeHashMinLength', 5);

// Set alphabet for 
// Configure::write('hashAlphabet', 'abcdefghjkmnpqrstuvwxyzABCDEFGHJKMNPQRSTUVWXYZ23456789');
// Configure::write('hashAlphabet', 'ABCDEFGHKMNPQRSTUVWXY3456789');
Configure::write('hashAlphabet', 'abcdefghkmnpqrstuvwxy3456789'); // User Friendly


// Used for generating share links
Configure::write('shareLinkSalt', SHARE_LINK_SALT);

// AWS (Amazon Web Services)
Configure::write('aws.awsAccessKey', AWS_ACCESS_KEY);
Configure::write('aws.awsSecretKey', AWS_SECRET_KEY);

// Set notification timeout for each phase 
// CHANGE ME BACK TO THESE VALUES AFTER DEBUG PHASE
// Support phase should only send notifications every 72 hours, design phase every 24
Configure::write('notification_timeout_duration_in_hours_for_movements_in_support_phase', 168);
Configure::write('notification_timeout_duration_in_hours_for_movements_in_design_phase', 24);
Configure::write('notification_timeout_duration_in_hours_for_movements_in_build_phase', 24);

// Geolocation template settings
Configure::write('geolocation.session_timeout', '1 day');
Configure::write('geolocation.api_key', GEOLOCATION_API_KEY);

Configure::write('geolocation.foursquare_client_id', FOURSQUARE_CLIENT_ID);
Configure::write('geolocation.foursquare_client_secret', FOURSQUARE_CLIENT_SECRET);
Configure::write('geolocation.foursquare_version', FOURSQUARE_VERSION);

Configure::write('geolocation.generate_key', GENERATE_KEY);

// Google human verification url
Configure::write('google_recaptcha_url', 'https://www.google.com/recaptcha/api/siteverify');
Configure::write('google_recaptcha_secret', GOOGLE_RECAPTCHA_SECRET);


Configure::write('cookie_key', COOKIE_KEY);

// 
Configure::write('short_url_path', SHORT_URL_PATH);

/**
 * The settings below can be used to set additional paths to models, views and controllers.
 *
 * App::build(array(
 *     'Model'                     => array('/path/to/models/', '/next/path/to/models/'),
 *     'Model/Behavior'            => array('/path/to/behaviors/', '/next/path/to/behaviors/'),
 *     'Model/Datasource'          => array('/path/to/datasources/', '/next/path/to/datasources/'),
 *     'Model/Datasource/Database' => array('/path/to/databases/', '/next/path/to/database/'),
 *     'Model/Datasource/Session'  => array('/path/to/sessions/', '/next/path/to/sessions/'),
 *     'Controller'                => array('/path/to/controllers/', '/next/path/to/controllers/'),
 *     'Controller/Component'      => array('/path/to/components/', '/next/path/to/components/'),
 *     'Controller/Component/Auth' => array('/path/to/auths/', '/next/path/to/auths/'),
 *     'Controller/Component/Acl'  => array('/path/to/acls/', '/next/path/to/acls/'),
 *     'View'                      => array('/path/to/views/', '/next/path/to/views/'),
 *     'View/Helper'               => array('/path/to/helpers/', '/next/path/to/helpers/'),
 *     'Console'                   => array('/path/to/consoles/', '/next/path/to/consoles/'),
 *     'Console/Command'           => array('/path/to/commands/', '/next/path/to/commands/'),
 *     'Console/Command/Task'      => array('/path/to/tasks/', '/next/path/to/tasks/'),
 *     'Lib'                       => array('/path/to/libs/', '/next/path/to/libs/'),
 *     'Locale'                    => array('/path/to/locales/', '/next/path/to/locales/'),
 *     'Vendor'                    => array('/path/to/vendors/', '/next/path/to/vendors/'),
 *     'Plugin'                    => array('/path/to/plugins/', '/next/path/to/plugins/'),
 * ));
 *
 */

App::build(array(
    'Model' => array(
    	APP . 'Model' . DS,
    	APP . 'Model' . DS . 'Site' . DS,
    	APP . 'Model' . DS . 'Global' . DS,
    	APP . 'Model' . DS . 'Templates' . DS . 'Geolocation' . DS),
    'Controller' => array(
    	APP . 'Controller' . DS . 'Templates' . DS,
    	)
));

/**
 * Custom Inflector rules can be set to correctly pluralize or singularize table, model, controller names or whatever other
 * string is passed to the inflection functions
 *
 * Inflector::rules('singular', array('rules' => array(), 'irregular' => array(), 'uninflected' => array()));
 * Inflector::rules('plural', array('rules' => array(), 'irregular' => array(), 'uninflected' => array()));
 *
 */

/**
 * Plugins need to be loaded manually, you can either load them one by one or all of them in a single call
 * Uncomment one of the lines below, as you need. Make sure you read the documentation on CakePlugin to use more
 * advanced ways of loading plugins
 *
 * CakePlugin::loadAll(); // Loads all plugins at once
 * CakePlugin::load('DebugKit'); //Loads a single plugin named DebugKit
 *
 */

/**
 * You can attach event listeners to the request lifecycle as Dispatcher Filter. By default CakePHP bundles two filters:
 *
 * - AssetDispatcher filter will serve your asset files (css, images, js, etc) from your themes and plugins
 * - CacheDispatcher filter will read the Cache.check configure variable and try to serve cached content generated from controllers
 *
 * Feel free to remove or add filters as you see fit for your application. A few examples:
 *
 * Configure::write('Dispatcher.filters', array(
 *		'MyCacheFilter', //  will use MyCacheFilter class from the Routing/Filter package in your app.
 *		'MyPlugin.MyFilter', // will use MyFilter class from the Routing/Filter package in MyPlugin plugin.
 * 		array('callable' => $aFunction, 'on' => 'before', 'priority' => 9), // A valid PHP callback type to be called on beforeDispatch
 *		array('callable' => $anotherMethod, 'on' => 'after'), // A valid PHP callback type to be called on afterDispatch
 *
 * ));
 */
Configure::write('Dispatcher.filters', array(
	'AssetDispatcher',
	'CacheDispatcher'
));

/**
 * Configures default file logging options
 */
App::uses('CakeLog', 'Log');
CakeLog::config('debug', array(
	'engine' => 'File',
	'types' => array('notice', 'info', 'debug'),
	'file' => 'debug',
));
CakeLog::config('error', array(
	'engine' => 'File',
	'types' => array('warning', 'error', 'critical', 'alert', 'emergency'),
	'file' => 'error',
));
